'''
전파의 기본 단위는 { 0 , 1 } 두 가지로 구성되어있으며, x+ (  ) 는 임의의 개수(최소 1개) x의 반복으로 이루어진 전파의 집합을 나타낸다.

(xyx)+ (  ) 는 괄호 내의 xyx의 반복으로 이루어진 전파의 집합을 뜻한다. 

반복을 의미하는 + 외에도 or 를 의미하는 | 기호가 있다. 
{ x | y } 는 x 혹은 y 를 의미하는 것으로, { 0+ | 1+ } 는 { 0 , 1 , 00 , 11 , 000 , 111 , … } 의 집합을 의미한다.
 아래는 두 기호를 복합적으로 사용한 예이다.

(100 | 11)+ = { 100 , 11 , 100 11 , 11 100 , 11 100 11 100 , 100 11 11 11 100 100, … }

ex) 

1+ = { 1, 11, 111, 1111, 11111, … }
10+ = { 10, 100, 1000, 10000, 100000, … }
(01)+ = { 01, 0101, 010101, 01010101, 0101010101, … }
(1001)+ = { 1001, 10011001, 100110011001, … }
10+11 = { 1011, 10011, 100011, 1000011, 10000011, … }
(10+1)+ = { 101, 1001, 10001, 1011001, 1001101, 100011011000001, … }

(100+1+ | 01)+ = {}

10+11에서

1[0+]11 이기 때문에 1, 11은 가만히 있고 그 안에 0+만 반복되는걸 볼 수 있다.
10+도 1[0+1]이라서 1은 가만히 있고 뒤에 0만 늘어난다.
(01)+은 (01)을 반복하기 때문에 010101010101이렇게 반복된다.
(1001)+역시 1001, 1001 1001, 1001 1001 1001 
(10+1)+ 은 (1[0+]1)+ 

10+1 = 101,1001,10001




'''

import re
import sys
 
T = int(sys.stdin.readline())
results = []
 
for _ in range(T):
    sign = sys.stdin.readline().replace('\n', '')
    p = re.compile('(100+1+|01)+')
    m = p.fullmatch(sign)
    if m: results.append("YES")
    else: results.append("NO")
 
for result in results:
    sys.stdout.write(str(result)+'\n')